# -*- coding: utf-8 -*-
"""BERT_MLP

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17OY92ZPapcojCQKbMESW8lJs7mmLi2Bo
"""

# !pip install tensorflow==1.15.0
# !pip install bert-tensorflow==1.0.1

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import tensorflow as tf
import tensorflow_hub as hub
from datetime import datetime
import bert
from bert import run_classifier
from bert import optimization
from bert import tokenization
import math

train = pd.read_csv('drive/My Drive/corona/eini/polarity_no_multi_label_train.csv')
test = pd.read_csv('drive/My Drive/corona/eini/polarity_no_multi_label_test.csv')
valid = pd.read_csv('drive/My Drive/corona/eini/polarity_no_multi_label_valid.csv')
data = pd.concat([train, valid, test]).reset_index(drop=True)

label_list = [0, 1, 2, 3]
sentiment_labels = ['خنثی', 'منفی', 'مثبت', 'پست عینی']

def multi_label_to_one_label(labels):
    one_labels = np.zeros(labels.shape, dtype=int)
    for i in range(labels.shape[0]):
        label_list = np.where(labels[i, :] > 0)[0]
        if len(label_list) > 1:
            random_one_label_tag = np.random.choice(label_list)
            one_labels[i, :] = 0
            one_labels[i, random_one_label_tag] = 1
        else:
            one_labels[i, :] = labels[i, :]
    final_labels = np.zeros(labels.shape[0])
    final_labels = np.argwhere(one_labels > 0)[:, 1]
    return final_labels

train["label"] = multi_label_to_one_label(np.array(train[sentiment_labels]))
test["label"] = multi_label_to_one_label(np.array(test[sentiment_labels]))
valid["label"] = multi_label_to_one_label(np.array(valid[sentiment_labels]))

data["label"] = multi_label_to_one_label(np.array(data[sentiment_labels]))
data = data[["Content", "label"]]
print(len(data))
print(set(list(data["label"])))

# This is a path to multilingual cased version of BERT
# BERT_MODEL_HUB = "multi_cased_L-12_H-768_A-12"
BERT_MODEL_HUB = "https://tfhub.dev/google/bert_multi_cased_L-12_H-768_A-12/1"

def create_tokenizer_from_hub_module():
    """Get the vocab file and casing info from the Hub module."""
    with tf.Graph().as_default():
        bert_module = hub.Module(BERT_MODEL_HUB)
        tokenization_info = bert_module(signature="tokenization_info", as_dict=True)
        with tf.Session() as sess:
            vocab_file, do_lower_case = sess.run([tokenization_info["vocab_file"],
                                                  tokenization_info["do_lower_case"]])

    return bert.tokenization.FullTokenizer(
        vocab_file=vocab_file, do_lower_case=do_lower_case)

def create_model(is_predicting, input_ids, input_mask, segment_ids, labels,
                 num_labels):
    """Creates a classification model."""

    bert_module = hub.Module(
        BERT_MODEL_HUB,
        trainable=True)

    bert_inputs = dict(
        input_ids=input_ids,
        input_mask=input_mask,
        segment_ids=segment_ids)

    bert_outputs = bert_module(
        inputs=bert_inputs,
        signature="tokens",
        as_dict=True)

    # Use "pooled_output" for classification tasks on an entire sentence.
    # Use "sequence_output" for token-level output.
    output_layer = bert_outputs["pooled_output"] 
    sequence_outputs = bert_outputs["sequence_output"]

    hidden_size = output_layer.shape[-1].value
    print("hidden_size", hidden_size)

    # Create our own layers to tune for politeness data.
    w1 = tf.get_variable(
        "w1", [num_labels, hidden_size],
        initializer=tf.truncated_normal_initializer(stddev=0.02))
    print("w1 shape:", w1.shape)

    b1 = tf.get_variable(
        "b1", [num_labels], initializer=tf.zeros_initializer())
    print("b1 shape:", b1.shape)

    w2 = tf.get_variable(
        "w2", [num_labels, num_labels],
        initializer=tf.truncated_normal_initializer(stddev=0.02))
    print("w2 shape:", w2.shape)

    b2 = tf.get_variable(
        "b2", [num_labels], initializer=tf.zeros_initializer())
    print("b2 shape:", b2.shape)

    with tf.variable_scope("loss"):
        # Dropout helps prevent overfitting
        output_layer = tf.nn.dropout(output_layer, keep_prob=0.9)
        print("bert shape:", output_layer.shape)
        out1 = tf.matmul(output_layer, w1, transpose_b=True)
        print("out1 shape:", out1.shape)
        out1 = tf.nn.bias_add(out1, b1)
        print("out1 shape:", out1.shape)
        logits = tf.matmul(out1, w2, transpose_b=True)
        print("logits shape:", logits.shape)
        logits = tf.nn.bias_add(logits, b2)
        print("logits shape:", logits.shape)
        log_probs = tf.nn.log_softmax(logits, axis=-1)
        probs = tf.nn.softmax(logits, axis=-1)

        # Convert labels into one-hot encoding
        one_hot_labels = tf.one_hot(labels, depth=num_labels, dtype=tf.float32)

        predicted_labels = tf.squeeze(tf.argmax(log_probs, axis=-1, output_type=tf.int32))
        # If we're predicting, we want predicted labels and the probabiltiies.

        if is_predicting:
            return (predicted_labels, probs, sequence_outputs, output_layer)

        # If we're train/eval, compute loss between predicted and actual label
        per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs, axis=-1)
        loss = tf.reduce_mean(per_example_loss)
        return (loss, predicted_labels, log_probs, sequence_outputs, output_layer)


# model_fn_builder actually creates our model function
# using the passed parameters for num_labels, learning_rate, etc.
def model_fn_builder(num_labels, learning_rate, num_train_steps,
                     num_warmup_steps):
    """Returns `model_fn` closure for TPUEstimator."""

    def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument
        """The `model_fn` for TPUEstimator."""

        input_ids = features["input_ids"]
        input_mask = features["input_mask"]
        segment_ids = features["segment_ids"]
        label_ids = features["label_ids"]

        is_predicting = (mode == tf.estimator.ModeKeys.PREDICT)

        # TRAIN and EVAL
        if not is_predicting:

            (loss, predicted_labels, probs, sequence_outputs, output_layer) = create_model(
                is_predicting, input_ids, input_mask, segment_ids, label_ids, num_labels)

            train_op = bert.optimization.create_optimizer(
                loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu=False)
            
            accuracy = tf.metrics.accuracy(label_ids, predicted_labels)

            tf.identity(accuracy[1], name='train_accuracy')
            tf.summary.scalar('train_accuracy', accuracy[1])

            tf.identity(loss, name='train_loss')
            tf.summary.scalar('train_loss', loss)

            # Calculate evaluation metrics.
            def metric_fn(label_ids, predicted_labels):
                accuracy = tf.metrics.accuracy(label_ids, predicted_labels)
                #         f1_score = tf.contrib.metrics.f1_score(
                #             label_ids,
                #             predicted_labels)
                #         auc = tf.metrics.auc(
                #             label_ids,
                #             predicted_labels)
                recall = tf.metrics.recall(label_ids, predicted_labels)
                precision = tf.metrics.precision(label_ids, predicted_labels)
                #         true_pos = tf.metrics.true_positives(
                #             label_ids,
                #             predicted_labels)
                #         true_neg = tf.metrics.true_negatives(
                #             label_ids,
                #             predicted_labels)
                #         false_pos = tf.metrics.false_positives(
                #             label_ids,
                #             predicted_labels)
                #         false_neg = tf.metrics.false_negatives(
                #             label_ids,
                #             predicted_labels)
                return {
                    "eval_accuracy": accuracy,
                    #             "f1_score": f1_score,
                    #             "auc": auc,
                                "precision": precision,
                                "recall": recall,
                    #             "true_positives": true_pos,
                    #             "true_negatives": true_neg,
                    #             "false_positives": false_pos,
                    #             "false_negatives": false_neg
                }

            eval_metrics = metric_fn(label_ids, predicted_labels)

            if mode == tf.estimator.ModeKeys.TRAIN:
                return tf.estimator.EstimatorSpec(mode=mode,
                                                  loss=loss,
                                                  train_op=train_op)
            else:
                return tf.estimator.EstimatorSpec(mode=mode,
                                                  loss=loss,
                                                  eval_metric_ops=eval_metrics)
        else:
            (predicted_labels, probs, sequence_outputs, output_layer) = create_model(
                is_predicting, input_ids, input_mask, segment_ids, label_ids, num_labels)

            predictions = {
                'probabilities': probs,
                'labels': predicted_labels,
                'sequence_outputs':sequence_outputs,
                'output_layer':output_layer
            }
            return tf.estimator.EstimatorSpec(mode, predictions=predictions)

    # Return the actual model function in the closure
    return model_fn

from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score

MAX_SEQ_LENGTH = 64
BATCH_SIZE = 64
LEARNING_RATE = 2e-5
NUM_TRAIN_EPOCHS = 8.0
WARMUP_PROPORTION = 0.1
SAVE_CHECKPOINTS_STEPS = 500
SAVE_SUMMARY_STEPS = 100
SPLIT = 10
SEED = 7
LABEL_COLUMN = "label"
DATA_COLUMN = "Content"
np.random.seed(SEED)
kfold = StratifiedKFold(n_splits=SPLIT, shuffle=False, random_state=SEED)
test_recall = []
test_precision = []
test_acc = []
tokenizer = create_tokenizer_from_hub_module()
for train_idx, test_idx in kfold.split(data, data[LABEL_COLUMN].to_numpy()):
  train_InputExamples = data.iloc[train_idx].apply(lambda x: bert.run_classifier.InputExample(guid=None,
                                                                                text_a=x[DATA_COLUMN],
                                                                                text_b=None,
                                                                                label=x[LABEL_COLUMN]), axis=1)

  test_InputExamples = data.iloc[test_idx].apply(lambda x: bert.run_classifier.InputExample(guid=None,
                                                                                text_a=x[DATA_COLUMN],
                                                                                text_b=None,
                                                                                label=1), axis=1)
  # # Convert our train and test features to InputFeatures that BERT understands.
  train_features = bert.run_classifier.convert_examples_to_features(train_InputExamples, label_list, MAX_SEQ_LENGTH, tokenizer)
  test_features = bert.run_classifier.convert_examples_to_features(test_InputExamples, label_list, MAX_SEQ_LENGTH, tokenizer)
  num_train_steps = int(len(train_features) / BATCH_SIZE * NUM_TRAIN_EPOCHS)
  print("num_train_steps", num_train_steps)
  num_warmup_steps = int(num_train_steps * WARMUP_PROPORTION)
  # # Specify output directory and number of checkpoint steps to save
  run_config = tf.estimator.RunConfig(save_summary_steps=SAVE_SUMMARY_STEPS, save_checkpoints_steps=SAVE_CHECKPOINTS_STEPS)
  model_fn = model_fn_builder(num_labels=len(label_list), learning_rate=LEARNING_RATE, num_train_steps=num_train_steps, num_warmup_steps=num_warmup_steps)
  estimator = tf.estimator.Estimator(model_fn=model_fn, config=run_config, params={"batch_size": BATCH_SIZE})
  # # Create an input function for training. drop_remainder = True for using TPUs.
  train_input_fn = bert.run_classifier.input_fn_builder(
      features=train_features,
      seq_length=MAX_SEQ_LENGTH,
      is_training=True,
      drop_remainder=False)

  current_time = datetime.now()
  tensors_to_log = {
      'train_accuracy': 'train_accuracy',
      'train_loss': 'train_loss'
  }
  logging_hook = tf.train.LoggingTensorHook(tensors=tensors_to_log, every_n_iter=1)

  # train
  estimator.train(input_fn=train_input_fn, max_steps=num_train_steps)

  valid_input_fn = run_classifier.input_fn_builder(
      features=train_features,
      seq_length=MAX_SEQ_LENGTH,
      is_training=False,
      drop_remainder=False)

  # # Create an input function for test. drop_remainder = True for using TPUs.
  predict_input_fn = run_classifier.input_fn_builder(features=test_features, seq_length=MAX_SEQ_LENGTH, is_training=False, drop_remainder=False)
  predictions = estimator.predict(predict_input_fn)

  # evaluate prediction results
  pred_labels = []
  test_text_list = data.iloc[test_idx][DATA_COLUMN].tolist()

  for sentence, pred in zip(test_text_list, predictions):
    pred_labels.append(pred['labels'])

  # print evaluation metrics value
  test_acc.append(accuracy_score(data.iloc[test_idx][LABEL_COLUMN].tolist(), pred_labels))
  # test_precision.append(precision_score(data.iloc[test_idx][LABEL_COLUMN].tolist(), pred_labels))
  # test_recall.append(recall_score(data.iloc[test_idx][LABEL_COLUMN].tolist(), pred_labels))
  print('=' * 100)
  print("Training took time ", datetime.now() - current_time)
  print(estimator.evaluate(input_fn=valid_input_fn, steps=None))
  print('-' * 100)
  print("test accuracy:", accuracy_score(data.iloc[test_idx][LABEL_COLUMN].tolist(), pred_labels)) 
  # print("test precision:", precision_score(data.iloc[test_idx][LABEL_COLUMN].tolist(), pred_labels)) 
  # print("test recall:", recall_score(data.iloc[test_idx][LABEL_COLUMN].tolist(), pred_labels)) 
  print('=' * 100)

# print('-' * 100)
# print("Train Accuracy: %.2f (+/- %.2f)" % (np.mean(train_acc), np.std(train_acc)))
# print("Train Precision: %.2f (+/- %.2f)" % (np.mean(train_precision), np.std(train_precision)))
# print("Train Recall: %.2f (+/- %.2f)" % (np.mean(train_recall), np.std(train_recall)))
print()
print("Test Accuracy: %.2f (+/- %.2f)" % (np.mean(test_acc), np.std(test_acc)))
# print("Test Precision: %.2f (+/- %.2f)" % (np.mean(test_precision), np.std(test_precision)))
# print("Test Recall: %.2f (+/- %.2f)" % (np.mean(test_recall), np.std(test_recall)))
print(test_acc)
# print(test_precision)
# print(test_recall)